// Copyright (c) 2018 Anton Semjonov
// Licensed under the MIT License

package main

import (
	"bufio"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"io"
)

// devaes effectively is a reader of random data which is
// generated by encrypting a devzero stream with a random key
func devAES() (r io.Reader) {

	// new random key
	key := make([]byte, 32)
	_, err := io.ReadFull(rand.Reader, key)
	if err != nil {
		panic("reading random key: " + err.Error())
	}

	// instantiate AES-256-CTR stream
	block, err := aes.NewCipher(key)
	if err != nil {
		panic("instantiating block ciper: " + err.Error())
	}
	var iv [aes.BlockSize]byte
	stream := cipher.NewCTR(block, iv[:])

	// wrap a buffered zero reader
	zerobuf := bufio.NewReaderSize(devZero(), 256*1024)
	return &cipher.StreamReader{S: stream, R: zerobuf}

}
